package be.fedict.eid.pkira.dnfilter;

import java.io.StringReader;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;

/**
 * Implementation of the DN Filter Manager.
 * 
 * @author Jan Van den Bergh
 */
@Name(DistinguishedNameManager.NAME)
@Scope(ScopeType.APPLICATION)
public class DistinguishedNameManagerImpl implements DistinguishedNameManager {

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DistinguishedName createDistinguishedName(String expression) throws InvalidDistinguishedNameException {
		// Check for null
		if (expression == null) {
			throw new InvalidDistinguishedNameException("Expression is null.");
		}

		// Parse the filter
		SortedMap<String, List<String>> data;
		try {
			// Parse the data
			DistinguishedNameParser distinguishedNameParser = new DistinguishedNameParser(new StringReader(
					expression));
			data = distinguishedNameParser.distinguishedName();
		} catch (ParseException e) {
			throw new InvalidDistinguishedNameException("Invalid filter expression: " + expression, e);
		} catch (TokenMgrError e) {
			throw new InvalidDistinguishedNameException("Invalid filter expression: " + expression, e);
		}

		// Validate the data
		validate(data);

		// Create the DistinguishedName
		return new DistinguishedName(data);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String normalize(String dnExpression) throws InvalidDistinguishedNameException {
		return createDistinguishedName(dnExpression).toString();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Set<DistinguishedName> overlapsWith(DistinguishedName newDN, Collection<DistinguishedName> otherDNs) {
		Set<DistinguishedName> result = new HashSet<DistinguishedName>();
		for(DistinguishedName otherDN: otherDNs) {
			if (otherDN.matches(newDN)) {
				result.add(otherDN);
			}
		}
				
		return result;
	}

	/**
	 * Validates the data generated by the parser.
	 */
	private void validate(SortedMap<String, List<String>> data) throws InvalidDistinguishedNameException {
		// Validate number of wildcards in each segment
		// Wildcards are only allowed if the segment has only one value
		// E.g. ou=a,ou=* is not allowed.
		for (Map.Entry<String, List<String>> entry : data.entrySet()) {
			if (entry.getValue().size() == 1) {
				continue;
			}

			for (String value : entry.getValue()) {
				if (DistinguishedName.WILDCARD.equals(value)) {
					throw new InvalidDistinguishedNameException("No wildcards allowed for " + entry.getKey());
				}
			}
		}
	}

}
