options{  STATIC = false;  JDK_VERSION = "1.6";}

PARSER_BEGIN(DistinguishedNameParser)
package be.fedict.eid.pkira.dnfilter;

import java.util.ArrayList;import java.util.List;import java.util.SortedMap;import java.util.TreeMap;
public class DistinguishedNameParser {}

PARSER_END(DistinguishedNameParser)

<DEFAULT> TOKEN: {	  < #LETTER		: ["a"-"z","A"-"Z"] >	| < #DIGIT		: ["0"-"9"] >	| < #SYMBOL		: "-" | "_" | "." | "@" | "/" | "+" | ":" | "&" | "?" | "#" | "<" | ">" | ";" | "\"" | "=" >	| < #COMMA		: "," >	| < #BACKSLASH	: "\\" >	| < #EQUALS		: "=" >	| < #ASTERISK 	: "*" >	| < #SPACE		: " " >}<EXPR> TOKEN: {	  < EXPR_KEY		: (<LETTER>)+ >	| < EXPR_WC_KEY		: <ASTERISK> <EXPR_KEY> >  	| < EXPR_EQUALITY	: <EQUALS> >			  : EXPRVALUE	| < EXPR_SEPARATOR 	: <COMMA> >}<EXPRVALUE> TOKEN: {	  < EXPR_WILDCARD	: <ASTERISK> >			: EXPR	| < EXPR_VALUE		: ( ( (<BACKSLASH>)? ( <LETTER> | <DIGIT> | <SYMBOL> | <SPACE> ) ) | ( <BACKSLASH> ( <BACKSLASH> | <COMMA> | <ASTERISK> ) ) )+ > : EXPR	}<DN> TOKEN: {	  < DN_KEY			: (<LETTER>)+ >	| < DN_EQUALITY		: <EQUALS> >			: DNVALUE	| < DN_SEPARATOR 	: <COMMA> >}<DNVALUE>	TOKEN: {	  < DN_VALUE		: ( ( (<BACKSLASH>)? ( <LETTER> | <DIGIT> | <SYMBOL> | <ASTERISK> | <SPACE> ) ) | ( <BACKSLASH> ( <BACKSLASH> | <COMMA> ) ) )+ > : DN}

<EXPR> SKIP: {
  <WS1: <SPACE> >
}<DN> SKIP: {  <WS2: <SPACE> >}private void dnExpressionPart(DistinguishedNameParserState state):{  Token key, value;}{   (   	(key=<EXPR_KEY>) <EXPR_EQUALITY> (value=<EXPR_VALUE> | value=<EXPR_WILDCARD>) |   	(key=<EXPR_WC_KEY>) <EXPR_EQUALITY> (value=<EXPR_WILDCARD>)   )    {    String n = key.image.toLowerCase().trim();    String v = value.image.trim();    state.addStateElement(n, v);  }}
private void dnPart(DistinguishedNameParserState state):{
  Token key, value;}
{
   (key=<DN_KEY>) <DN_EQUALITY> (value=<DN_VALUE>)  
  {    String n = key.image.toLowerCase();    String v = value.image;    state.addStateElement(n, v);  }}DistinguishedNameParserState distinguishedName():{  DistinguishedNameParserState state = new DistinguishedNameParserState(false);}{  {    token_source.SwitchTo(DN);  }    dnPart(state) ( <DN_SEPARATOR> dnPart(state) )* <EOF>    {        return state;  }}DistinguishedNameParserState distinguishedNameExpression():{  DistinguishedNameParserState state = new DistinguishedNameParserState(true);}{  {    token_source.SwitchTo(EXPR);  }    dnExpressionPart(state) ( <EXPR_SEPARATOR> dnExpressionPart(state) )* <EOF>    {        return state;  }}